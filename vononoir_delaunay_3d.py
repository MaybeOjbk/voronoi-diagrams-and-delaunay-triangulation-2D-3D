# -*- coding: utf-8 -*-
"""Vononoir Delaunay 3D.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1owNWTvHa1dHMIMj440FfxIMR77wcFdre

** Voronoi 3D **
"""

# Commented out IPython magic to ensure Python compatibility.
import scipy
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
# %matplotlib inline
from scipy.spatial import Voronoi, voronoi_plot_2d

# Voronoi diagrams in N dimensions.
# (3D)
points3D = points = np.array([[1.934312, 4.965524, 7.271132],
[6.822232, 8.997692, 3.092902],
[3.027644, 8.216292, 8.384960],
[5.416739, 6.449104, 5.680725],
[1.508730, 8.179743, 3.704136],
[6.978985, 6.602276, 7.027399],
[3.783730, 3.419706, 5.465712],
[8.600116, 2.897259, 4.448802],
[8.536551, 3.411936, 6.945672],
[5.935629, 5.340790, 6.213101]])
#the edges of a 3D Voronoi diagram 
vor = scipy.spatial.Voronoi(points3D)
        
fig = plt.figure()
fig.set_size_inches(8,8)
ax = fig.add_subplot(111, projection = '3d')


for indices in vor.ridge_vertices:
    voronoi_coords = vor.vertices[indices]
    ax.plot(voronoi_coords[...,0], voronoi_coords[...,1], voronoi_coords[...,2], lw=2, c = 'green', alpha = 0.05)
    
vor_vertex_coords = vor.vertices


ax.legend()
ax.set_xlim3d(points3D[...,0].min(), points3D[...,0].max())
ax.set_ylim3d(points3D[...,1].min(), points3D[...,1].max())

from scipy.spatial import Delaunay
tri = Delaunay(points)

tri

"""** Denaulay 3D**


"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.tri as mtri
from scipy.spatial import Delaunay

x = points3D[:,0]
y = points3D[:,1]
z = points3D[:,2]

print(x)

# Triangulate parameter space to determine the triangles
#tri = mtri.Triangulation(x, y)
tri = Delaunay(np.array([x,y]).T)

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1, projection='3d')

# The triangles in parameter space determine which x, y, z points are
# connected by an edge
#ax.plot_trisurf(x, y, z, triangles=tri.triangles, cmap=plt.cm.Spectral)
ax.plot_trisurf(x, y, z, triangles=tri.simplices, cmap=plt.cm.Spectral)


plt.show()